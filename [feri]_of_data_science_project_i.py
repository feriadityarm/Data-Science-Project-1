# -*- coding: utf-8 -*-
"""[Feri] of Data_Science_Project_I.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/108-D7fvfDEuM6ZLY8C_P6IzOpSXMdIae
"""

# Import Necessary Libraries
# Import Data Manipulation libraries
import pandas as pd

# Import Visualization libraries
import matplotlib.pyplot as plt
import seaborn as sns

from google.colab import drive
drive.mount('/content/drive')

pd.options.mode.chained_assignment = None

"""### <b><span style='color:#85BB65'>|</span> Domain Knowledge</b>

<br>

1. **`work_year` [categorical] :** The year the salary was paid.

2. **`experience_level` [categorical] :** The experience level in the job during the year.

3. **`employment_type` [categorical] :** The type of employment for the role.

4. **`job_title` [categorical] :** The role worked in during the year.

5. **`salary` [numerical] :** The total gross salary amount paid.

6. **`salary_currency` [categorical] :** The currency of the salary paid as an ISO 4217 currency code.

7. **`salaryinusd` [numerical] :** The salary in USD.

8. **`employee_residence` [categorical]:** Employee's primary country of residence in during the work year as an ISO 3166 country code.

9. **`remote_ratio` [ratio]:** The overall amount of work done remotely.

10. **`company_location` [categorical]:** The country of the employer's main office or contracting branch.

11. **`company_size` [categorical]:** The median number of people that worked for the company during the year as an ISO 3166 country code.
"""

data = pd.read_csv('ds_salaries.csv')

data.head(4)

"""# 1. Exploratory Data Analysis (EDA)

## 1.1 Check Null Values
"""

data.isna().sum()

"""## 1.2 Check Duplicate Data"""

data.shape

duplicate_rows_data = data[data.duplicated()]
print("Number of duplicated rows: ", duplicate_rows_data)

# drop duplicate data
data = data.drop_duplicates()

data.shape

"""## 1.3 Check Unique Value in Each Column"""

data.dtypes

#fungsi untuk statistik deskriptif
data.describe()

data.columns

#loop semua kolom, lalu dicek apakah kolom tersebut object (categorical)
for column in data.columns:
  if data[column].dtypes == object:

    num_distinct_values = data[column].nunique()
    distinct_values = data[column].unique()

    print(f"{column}: {num_distinct_values} -> {distinct_values}\n")

"""## 1.4 Rename the Value for better understanding"""

data.loc[:,'experience_level'] = data.loc[:,'experience_level'].replace({
    'SE': 'Senior',
    'EN': 'Entry Level',
    'EX': 'Executive Level',
    'MI': 'Mid/Intermediate Level'
})

data.loc[:,'employment_type'] = data.loc[:,'employment_type'].replace({
    'FL' : 'Freelance',
    'CT' : 'Contractor',
    'FT' : 'Full Time',
    'PT' : 'Part Time'
})

data.loc[:,'remote_ratio'] = data.loc[:,'remote_ratio'].replace({
    0 : 'On-Site',
    50 : 'Hybrid',
    100 : 'Remote'
})

data.loc[:,'company_size'] = data.loc[:,'company_size'].replace({
    'L' : 'Large',
    'S' : 'Small',
    'M' : 'Medium'
})

data.head()

"""## 1.5 Group the Job Title"""

print(data['job_title'].nunique())
# data['job_title'].unique()

def job_category(job_title):
  data_engineering = ['Data Engineer', 'Analytics Engineer', 'BI Data Engineeer', 'Business Intelligence Engineer','Principal Data Engineer',
                      'Research Engineer', 'Computer Vision Engineer', 'ETL Engineer', 'Data DevOps Engineer', 'MLOps Engineer', 'Cloud Database Engineer',
                      'Data Infrastructure Engineer', 'Software Data Engineer', 'Data Operations Engineer', 'Azure Data Engineer', 'Marketing Data Engineer'
                      'Data Science Engineer', 'NLP Engineer', 'Data Analytics Engineer', 'Cloud Data Engineer']

  data_scientist = ['Data Scientist', 'Applied Scientist', 'Research Scientist', 'Data Analyst', 'BI Data Analyst','Business Data Analyst', 'BI Analyst',
                    'Principal Data Scientist', 'Data Quality Analyst','Compliance Data Analyst', 'Applied Data Scientist', 'Staff Data Analyst',
                    'Financial Data Analyst', 'Data Analytics Specialist', 'Insight Analyst', 'Product Data Analyst', 'Data Operations Analyst',
                    'Marketing Data Analyst', 'Product Data Scientist', 'Staff Data Scientist', 'Finance Data Analyst']

  machine_learning = ['Machine Learning Engineer', 'ML Engineer', 'Lead Machine Learning Engineer', 'Principal Machine Learning Engineer', 'JD Computer Vision Reasercher',
                      'Deep Learning Reasercher', 'AI/Computer Vision Engineer', 'Applied Machine Learning Engineer', 'AI Developer', 'AI Programmer',
                      'Machine Learning Scientist', 'AI Scientist', 'Applied Machine Learning Scientist','BI Developer', 'Machine Learning Infrastructure Engineer',
                      'Deep Learning Engineer', 'Machine Learning Software Engineer', 'Computer Vision Software Engineer','Machine Learning Research Engineer',
                      'Machine Learning Developer', '3D Computer Vision Researcher', 'Principal Machine Learning Engineer', 'Power BI Developer',
                      'ETL Developer', 'Principal Data Analyst']

  data_architecture = ['Data Architect', 'Big Data Architect', 'Data Strategist', 'Data Management Specialist', 'Principal Data Architect', 'Cloud Data Architect']

  management = ['Data Science Manager', 'Director of Data Science', 'Head of Data Science', 'Data Scientist Lead', 'Head of Machine Learning',
                'Data Science Consultant', 'Data Analytics Manager', 'Head of Data', 'Lead Data Scientist', 'Data Analytics Lead', 'Data Lead', 'Manager Data Management',
                'Data Analytics Consultant', 'Data Science Tech Lead', 'Machine Learning Manager', 'Lead Machine Learning Engineer', 'Lead Data Engineer', 'Head of Machine Learning',
                ]

  if job_title in data_engineering:
    return "Data Engineering"
  elif job_title in data_scientist:
    return "Data Scientist"
  elif job_title in machine_learning:
    return "Machine Learning"
  elif job_title in data_architecture:
    return "Data Architecture"
  elif job_title in management:
    return "Management"
  else:
    return "Others"

data.loc[:,'job_category'] = data['job_title'].apply(job_category)

data.job_category.describe()

data

"""## 1.6 Adjust Salary to Present Value

#### **<span style='color:#85BB65'>Dealing with Inflation rate</span>**
<br>

![](https://www.halifax.co.uk/assets/financial-planning-centre/inflation-projection.png)


<br>

In order to accurately compare salaries across different years, it is essential to account for inflation. Inflation is the rate at which the general price levels of goods and services increase over time. By adjusting salaries to a common currency and year, we can make meaningful comparisons between them.

<br>

![](https://timeseriesreasoning.files.wordpress.com/2021/05/88f72-1gjxkmcxhudin7t07swj0mq.png)



<br>

To adjust salaries from different years to their present value for comparison purposes. We will be using a dataset containing information on employee salaries, work years, and currency.

<br>

### <b><span style='color:#85BB65'>|</span> Explanation:</b>

<br>

1. **Define inflation rates** for the United States (US) and global markets. These rates will be used to adjust the salaries based on the year and currency.

2. Create a function **adjust_salary()** that takes a row from the dataset as input and calculates the adjusted salary based on the work year, original salary, and currency. If the work year is 2023, the salary does not need to be adjusted, and the original salary is returned.

3. Determine the **number of years between the work year and 2023** . Use the appropriate inflation rate based on the currency, either the US or global inflation rate.

4. Calculate the adjusted salary by **applying the inflation rate** to the original salary for each year from the work year to 2023.

5. **Apply the adjust_salary() function** to the dataset using the apply() method, and create a new column 'adjusted_salary' with the adjusted salary values.
<br>

> By accounting for inflation, we can gain a better understanding of the true value of salaries in different years and currencies.
"""

#inflation rate
us_inflation_rates = {2019: 0.0181,
                      2020: 0.0123,
                      2021: 0.0470,
                      2022: 0.065}
global_inflation_rates = {2019: 0.0219,
                          2020: 0.0192,
                          2021: 0.0350,
                          2022: 0.088}

#Inflation adjusted salary
def adjust_salary(row):
  year = row['work_year']
  original_salary = row['salary_in_usd']
  currency = row['salary_currency']

  if year == 2023:
    return original_salary
  else:
    adjusted_salary = original_salary

    for i in range(year,2023):
      if currency == 'USD':
        inflation_rate = us_inflation_rates[i]
      else:
        inflation_rate = global_inflation_rates[i]

      adjusted_salary = adjusted_salary * (1 + inflation_rate)

  return adjusted_salary

data['adjusted_salary'] = data.apply(adjust_salary,axis = 1)

data [['work_year', 'salary_currency', 'salary_in_usd', 'adjusted_salary']].tail()

"""## 1.7 Job Distribution"""

value_counts = data['job_category'].value_counts(normalize=True) * 100
value_counts

fig , ax = plt.subplots(figsize=(8,4))

ax.barh(value_counts.index, value_counts.values, color = 'g') #set up axis utama
ax.set_title('Job Category Percentage')
ax.set_xlabel('Percentage')
ax.set_ylabel('Job Category')

plt.show()



"""## 1.8 Distribution across different employment types"""

plt.figure(figsize=(10,4))

sns.boxplot(data=data, x='employment_type', y='adjusted_salary')

plt.show()

"""## 1.9 Distribution of Salary"""

sns.histplot(data['adjusted_salary'])

plt.title('Distribution of Adjusted Salary')
plt.ylabel('Frequency')
plt.xlabel('Adjusted Salary')
plt.show()

"""## 1.10 Boxplot and Swarmplot of Adjusted Salary"""

plt.figure(figsize=(8,6))

sns.boxplot(x=data['adjusted_salary'], palette='coolwarm')
sns.swarmplot(x=data['adjusted_salary'], color='blue', alpha=0.4, size=2.5)

plt.show()

data['adjusted_salary'].describe()

"""# 2. Answer These Questions
- Show the **median** adjusted data scientist salary, for each experience level
- Show the number of records for each company_location, sorted descending
- From this data, show the **median** adjusted salary of employee who works for company located in Indonesia (ID), do you think that value represents the salary in Indonesia? why? why not?
"""

# Show the median adjusted data scientist salary, for each experience level
#pake log data scientis, experience dipilih, adjusted terus group by

data.groupby('experience_level')['adjusted_salary'].describe().T

median_salary = data.groupby('experience_level')['adjusted_salary'].median().plot.bar()

value_counts_el = data['experience_level'].value_counts(normalize=True) * 100
print(value_counts_el)

"""

```
# This is formatted as code
```

**Answer:**
1. The adjusted salary for Executive Level Data Scientists is the highest at all experience levels
2. The adjusted salary for an Entry Level Data Scientist is the lowest at all experience levels
3. The adjusted salary for Senior Level Data Scientists is the second highest across all experience levels but the most within experience levels at over 60%.
4. The adjusted salary for Mid/Intermediate Level Data Scientists is the third highest across all experience levels
5. The adjusted salary difference for the highest and lowest levels is around USD 128,723 a year
6. The higher the experience level, the higher the salary adjusted
7. The comparison between experience levels is directly proportional to adjusted salary"""

# Show the number of records for each company_location, sorted descending
#Tunjukan semua company di seluruh dunia
data.head(10)

locations = data['company_location'].value_counts(ascending=False).reset_index()
print(locations)

data['company_location'].describe()

value_counts_cl = data['company_location'].value_counts(normalize=True) * 100
print(value_counts_cl)

import seaborn as sns
import plotly.express as px
import matplotlib.pyplot as plt

ax2= px.treemap(data,path=['company_location'],title="Company Location")
ax2.show()

"""**Answer**


1. The company location in America with 1929 Data Science companies or the largest number of data science companies with more than 74% of the number of data science companies in the world
2. Great Britain is the second with 155 companies in the country
3. Canada is the third country with 83 companies based in the country
4. The company locations of Data Science is 2584 companies with 72 countries

"""

# From this data, show the median adjusted salary of employee who works for company located in Indonesia (ID),
# do you think that value represents the salary in Indonesia? why? why not?

#Mencari company di Indonesia dengan cek merepresentasikan salary di Indonesia atau ga

data['employment_type'].value_counts()

data.loc[(data['company_location'] == 'ID')]

"""**Answer**


1.  In Indonesia (ID), there are two Data Science companies
2.  Case 1 = there is one person working as data science with Mid/Intermediate Level status remotely from India (IN) with a salary adjustment of USD 58116,608 or IDR 906,619,085 / year or Rp. 75,551,590 / month (1 United States Dollar = 15,600 Indonesian Rupiah)

Based on data from IDstar, a data scientist earns the following salary:
Data scientist with 0-1 year experience: IDR 9,000,000 per month
Data scientist with 1-3 years of experience: IDR 10,000,000 IDR 18,000,000 per month
Data scientist with 4-6 years of experience: Rp19,000,000 - Rp28,000,000 per month
Data scientist with 7-8 years of experience: Rp30,000,000 - Rp60,000,000 per month

from this data can prove that the salary received by a data scientist in the previous case represents the salary in Indonesia and even exceeds the existing average

3. Case 2 = There is a person working as a Data Analyst with Entry Level status working on-site in Indonesia receiving a salary adjustment of 15975,000 USD or IDR 263,587,500 per year or Rp. 21,965,625 per month (1 United States Dollar = 15,600 Indonesian Rupiah)

According to Indeed, the average salary of a data analyst in Jakarta is around Rp 6,473,740 / month.

from this data proves that in case 2 a data analyst who works as a data analyst and lives in Indonesia represents that he gets a salary above the average of the data

"""